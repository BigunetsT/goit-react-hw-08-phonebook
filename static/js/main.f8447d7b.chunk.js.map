{"version":3,"sources":["components/UserMenu/UserMenu.module.scss","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-reducer.js","components/AppBar/AppBar.module.scss","components/Container/Container.module.scss","routes.js","components/Navigation.js","components/UserMenu/UserMenu.js","components/AuthNav/AuthNav.js","components/AppBar/AppBar.js","components/Container/Container.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","redux/store.js","index.js","redux/auth/auth-actions.js","redux/auth/auth-reducer.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","updateContactRequest","updateContactSuccess","updateContactError","changeFilter","axios","defaults","baseURL","fetchContacts","dispatch","a","get","data","addContact","name","number","contact","post","deleteContact","contactId","delete","updateContact","id","update","patch","getFilter","state","contacts","filter","getContacts","items","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","getSortContacts","sort","b","itemsReducer","createReducer","payload","_","map","filterReducer","contactsReducer","combineReducers","routes","home","register","login","connect","isAuthenticated","authSelectors","getIsAuthenticated","className","activeClassName","exact","to","mapDispatchToProps","onLogout","authOperations","logOut","email","getUserEmail","styles","type","btn","onClick","AuthNav","props","header","Container","children","container","Component","component","redirectTo","routeProps","render","restricted","HomePage","lazy","ContactsPage","LoginPage","RegisterPage","App","this","onGetCurretnUser","fallback","path","getCurrentUser","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","devTools","process","persistor","persistStore","ReactDOM","StrictMode","loading","document","getElementById","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","user","authActions","token","setError","error","headers","common","Authorization","credentials","response","message","logIn","getState","persistedToken"],"mappings":"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","file":"static/js/main.f8447d7b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"email\":\"UserMenu_email__2lcZk\",\"btn\":\"UserMenu_btn__1uY27\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\nexport const updateContactRequest = createAction(\r\n  'contacts/updateContactRequest',\r\n);\r\nexport const updateContactSuccess = createAction(\r\n  'contacts/updateContactSuccess',\r\n);\r\nexport const updateContactError = createAction('contacts/updateContactError');\r\n\r\nexport const changeFilter = createAction('contacts/filter');\r\n","import axios from 'axios';\r\n\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactError,\r\n  fetchContactSuccess,\r\n  updateContactRequest,\r\n  updateContactSuccess,\r\n  updateContactError,\r\n} from './contacts-actions';\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\nconst addContact =\r\n  ({ name, number }) =>\r\n  async dispatch => {\r\n    const contact = { name, number };\r\n    dispatch(addContactRequest());\r\n    try {\r\n      const { data } = await axios.post('/contacts', contact);\r\n      dispatch(addContactSuccess(data));\r\n    } catch (error) {\r\n      dispatch(addContactError(error));\r\n    }\r\n  };\r\nconst deleteContact = contactId => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${contactId}`);\r\n    dispatch(deleteContactSuccess(contactId));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n\r\nconst updateContact =\r\n  ({ id, name, number }) =>\r\n  async dispatch => {\r\n    const update = { name, number };\r\n    dispatch(updateContactRequest());\r\n    try {\r\n      const { data } = await axios.patch(`/contacts/${id}`, update);\r\n      dispatch(updateContactSuccess(data));\r\n    } catch (error) {\r\n      dispatch(updateContactError(error));\r\n    }\r\n  };\r\n\r\nexport default { fetchContacts, addContact, deleteContact, updateContact };\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\nconst getContacts = state => state.contacts.items;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\nconst getSortContacts = createSelector([getVisibleContacts], contacts => {\r\n  return contacts.sort((a, b) => (a.name > b.name ? 1 : -1));\r\n});\r\n\r\nexport default { getFilter, getContacts, getVisibleContacts, getSortContacts };\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  changeFilter,\r\n  updateContactSuccess,\r\n  fetchContactSuccess,\r\n} from './contacts-actions';\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [updateContactSuccess]: (state, { payload }) =>\r\n    state.map(contact =>\r\n      contact.id === payload.id\r\n        ? { ...contact, name: payload.name, number: payload.number }\r\n        : contact,\r\n    ),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nexport default contactsReducer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppBar_header__2F-LS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3Snq1\"};","const routes = {\r\n  home: '/',\r\n  register: '/register',\r\n  login: '/login',\r\n  contacts: '/contacts',\r\n};\r\n\r\nexport default routes;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport routes from '../routes';\r\nimport '../styles.scss';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\nconst Navigation = ({ isAuthenticated }) => {\r\n  return (\r\n    <nav>\r\n      <NavLink\r\n        className=\"header__link\"\r\n        activeClassName=\"header__link-active\"\r\n        exact\r\n        to={routes.home}\r\n      >\r\n        Головна\r\n      </NavLink>\r\n      {isAuthenticated && (\r\n        <NavLink\r\n          className=\"header__link\"\r\n          activeClassName=\"header__link-active\"\r\n          to={routes.contacts}\r\n        >\r\n          Контакти\r\n        </NavLink>\r\n      )}\r\n    </nav>\r\n  );\r\n};\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\nNavigation.propTypes = {\r\n  isAuthenticated: PropTypes.bool,\r\n};\r\nexport default connect(mapStateToProps)(Navigation);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './UserMenu.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors, authOperations } from '../../redux/auth';\r\n\r\nconst UserMenu = ({ email, onLogout }) => {\r\n  return (\r\n    <div>\r\n      <span className={styles.email}>{email}</span>\r\n      <button type=\"button\" className={styles.btn} onClick={onLogout}>\r\n        Вийти\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = state => ({\r\n  email: authSelectors.getUserEmail(state),\r\n});\r\n\r\nUserMenu.propTypes = {\r\n  email: PropTypes.string,\r\n  onLogout: PropTypes.func,\r\n};\r\nconst mapDispatchToProps = {\r\n  onLogout: authOperations.logOut,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport routes from '../../routes';\r\nimport '../../styles.scss';\r\n\r\nconst AuthNav = props => {\r\n  return (\r\n    <nav>\r\n      <NavLink\r\n        className=\"header__link\"\r\n        activeClassName=\"header__link-active\"\r\n        exact\r\n        to={routes.register}\r\n      >\r\n        Реєстрація\r\n      </NavLink>\r\n      <NavLink\r\n        className=\"header__link\"\r\n        activeClassName=\"header__link-active\"\r\n        to={routes.login}\r\n      >\r\n        Вхід\r\n      </NavLink>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default AuthNav;\r\n","import React from 'react';\r\nimport Navigation from '../Navigation';\r\nimport UserMenu from '../UserMenu';\r\nimport AuthNav from '../AuthNav';\r\nimport styles from './AppBar.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../../redux/auth';\r\n\r\nconst AppBar = ({ isAuthenticated }) => {\r\n  return (\r\n    <header className={styles.header}>\r\n      <Navigation />\r\n      {isAuthenticated ? <UserMenu /> : <AuthNav />}\r\n    </header>\r\n  );\r\n};\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(AppBar);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Container.module.scss';\r\n\r\nconst Container = ({ children }) => {\r\n  return <div className={styles.container}>{children}</div>;\r\n};\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Container;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\r\n    }\r\n  />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n  component: PropTypes.elementType,\r\n  isAuthenticated: PropTypes.bool,\r\n  redirectTo: PropTypes.string,\r\n};\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nPublicRoute.propTypes = {\r\n  component: PropTypes.elementType,\r\n  isAuthenticated: PropTypes.bool,\r\n  redirectTo: PropTypes.string,\r\n};\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\nexport default connect(mapStateToProps)(PublicRoute);\r\n","import React, { Component, lazy, Suspense } from 'react';\nimport { Switch } from 'react-router-dom';\nimport AppBar from './components/AppBar';\nimport Container from './components/Container';\nimport routes from './routes';\nimport { authOperations } from './redux/auth';\nimport { connect } from 'react-redux';\nimport PrivateRoute from './components/PrivateRoute';\nimport PublicRoute from './components/PublicRoute';\n\nconst HomePage = lazy(() =>\n  import('./pages/HomePage' /* webpackChunkName: \"home-page\" */),\n);\nconst ContactsPage = lazy(() =>\n  import('./pages/ContactsPage' /* webpackChunkName: \"contacts-page\" */),\n);\nconst LoginPage = lazy(() =>\n  import('./pages/LoginPage' /* webpackChunkName: \"login-page\" */),\n);\nconst RegisterPage = lazy(() =>\n  import('./pages/RegisterPage' /* webpackChunkName: \"register-page\" */),\n);\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onGetCurretnUser();\n  }\n  render() {\n    return (\n      <>\n        <Container>\n          <AppBar />\n          <Suspense fallback={<h1>Завантаження...</h1>}>\n            <Switch>\n              <PublicRoute exact path={routes.home} component={HomePage} />\n              <PublicRoute\n                path={routes.login}\n                restricted\n                redirectTo={routes.contacts}\n                component={LoginPage}\n              />\n              <PublicRoute\n                path={routes.register}\n                restricted\n                redirectTo={routes.contacts}\n                component={RegisterPage}\n              />\n              <PrivateRoute\n                path={routes.contacts}\n                redirectTo={routes.login}\n                component={ContactsPage}\n              />\n            </Switch>\n          </Suspense>\n        </Container>\n      </>\n    );\n  }\n}\nconst mapDispatchToProps = {\n  onGetCurretnUser: authOperations.getCurrentUser,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { contactsReducer } from './contacts';\r\nimport logger from 'redux-logger';\r\nimport { authReducer } from './auth';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nexport default {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: setError,\r\n  [authActions.loginError]: setError,\r\n  [authActions.logoutError]: setError,\r\n  [authActions.getCurrentUserError]: setError,\r\n});\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n});\r\nexport default combineReducers({\r\n  user,\r\n  isAuthenticated,\r\n  token,\r\n  error,\r\n});\r\n","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\nconst register = credentials => async dispatch => {\r\n  dispatch(authActions.registerRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/signup', credentials);\r\n    token.set(response.data.token);\r\n    dispatch(authActions.registerSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.registerError(error.message));\r\n  }\r\n};\r\n\r\nconst logIn = credentials => async dispatch => {\r\n  dispatch(authActions.loginRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/login', credentials);\r\n    token.set(response.data.token);\r\n    dispatch(authActions.loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\n\r\nconst logOut = () => async dispatch => {\r\n  dispatch(authActions.logoutRequest());\r\n\r\n  try {\r\n    await axios.post('/users/logout');\r\n    token.unset();\r\n    dispatch(authActions.logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(authActions.logoutError(error.message));\r\n  }\r\n};\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n    dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n};\r\nexport default { register, logIn, logOut, getCurrentUser };\r\n","const getUserEmail = state => state.auth.user.email;\r\nconst getIsAuthenticated = state => state.auth.isAuthenticated;\r\n\r\nexport default {\r\n  getIsAuthenticated,\r\n  getUserEmail,\r\n};\r\n"],"sourceRoot":""}