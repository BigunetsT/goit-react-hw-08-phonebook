{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/Modal/Modal.module.scss","components/Filter/Filter.module.scss","components/ContactList/ContactList.module.scss","components/ContactItem/ContactItem.module.scss","components/ContactForm/ContactForm.jsx","components/Modal/Modal.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage.js"],"names":["module","exports","INITIAL_STATE","name","number","ContactForm","state","handleChange","e","currentTarget","value","setState","prev","handleSubmit","preventDefault","props","contacts","map","item","toLowerCase","includes","alert","onSubmit","reset","this","className","styles","contactForm","title","label","input","type","placeholder","pattern","required","onChange","addContactBtn","Component","connect","contactsSelectors","getContacts","dispatch","contactsOperations","addContact","modalRoot","document","querySelector","Modal","handleKeyDown","event","code","onClose","handleBackdropClick","target","window","addEventListener","removeEventListener","createPortal","overlay","onClick","modal","closeModalBtn","children","getFilter","changeFilter","filter","onDelete","id","deleteContact","onUpdate","contactItem","contactData","phoneNumber","contactOperations","contactBtn","getVisibleContacts","contactsList","ContactsPage","showModal","openModal","closeModal","fetchContacts","Button","variant"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,2BAA2B,MAAQ,2BAA2B,MAAQ,2BAA2B,cAAgB,qC,mBCA1LD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,MAAQ,qBAAqB,cAAgB,+B,mBCAhGD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,MAAQ,wB,mBCAxFD,EAAOC,QAAU,CAAC,aAAe,oC,mBCAjCD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,YAAc,iCAAiC,WAAa,gCAAgC,KAAO,4B,yICM9JC,EAAgB,CACpBC,KAAM,GACNC,OAAQ,IAEJC,E,4MAQJC,M,eAAaJ,G,EACbK,aAAe,SAAAC,GACb,MAAwBA,EAAEC,cAAlBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MACd,EAAKC,UAAS,SAAAC,GAAI,kCACbA,GADa,kBAEfT,EAAOO,Q,EAGZG,aAAe,SAAAL,GACb,IAAQL,EAAS,EAAKG,MAAdH,KACRK,EAAEM,iBAEA,EAAKC,MAAMC,SACRC,KAAI,SAAAC,GAAI,OAAIA,EAAKf,KAAKgB,iBACtBC,SAASjB,EAAKgB,eAEjBE,MAAM,GAAD,OAAIlB,EAAJ,6BAGP,EAAKY,MAAMO,SAAS,EAAKhB,OACzB,EAAKiB,U,EAEPA,MAAQ,WACN,EAAKZ,SAAL,eAAmBT,K,4CAErB,WACE,MAAyBsB,KAAKlB,MAAtBH,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACd,OACE,uBAAMkB,SAAUE,KAAKX,aAAcY,UAAWC,IAAOC,YAArD,UACE,oBAAIF,UAAWC,IAAOE,MAAtB,yFACA,wBAAOH,UAAWC,IAAOG,MAAzB,gCAEE,uBACEJ,UAAWC,IAAOI,MAClBC,KAAK,OACL5B,KAAK,OACLO,MAAOP,EACP6B,YAAY,iEACZC,QAAQ,yHACRL,MAAM,kcACNM,UAAQ,EACRC,SAAUX,KAAKjB,kBAGnB,wBAAOkB,UAAWC,IAAOG,MAAzB,4FAEE,uBACEJ,UAAWC,IAAOI,MAClBC,KAAK,MACL5B,KAAK,SACL6B,YAAY,YACZtB,MAAON,EACP6B,QAAQ,yFACRL,MAAM,giBACNM,UAAQ,EACRC,SAAUX,KAAKjB,kBAGnB,wBAAQwB,KAAK,SAASN,UAAWC,IAAOU,cAAxC,oG,GAlEkBC,aAkFXC,eATS,SAAAhC,GAAK,MAAK,CAChCU,SAAUuB,IAAkBC,YAAYlC,OAGf,SAAAmC,GAAQ,MAAK,CACtCnB,SAAU,gBAAGnB,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OACRqC,EAASC,IAAmBC,WAAW,CAAExC,OAAMC,gBAGpCkC,CAA6CjC,G,kCCxFtDuC,EAAYC,SAASC,cAAc,eAEpBC,E,4MAWnBC,cAAgB,SAAAC,GACK,WAAfA,EAAMC,MACR,EAAKnC,MAAMoC,W,EAGfC,oBAAsB,SAAAH,GAChBA,EAAMxC,gBAAkBwC,EAAMI,QAChC,EAAKtC,MAAMoC,W,uDAbf,WACEG,OAAOC,iBAAiB,UAAW/B,KAAKwB,iB,kCAE1C,WACEM,OAAOE,oBAAoB,UAAWhC,KAAKwB,iB,oBAY7C,WAAU,IAAD,OACP,OAAOS,uBACL,qBAAKhC,UAAWC,IAAOgC,QAASC,QAASnC,KAAK4B,oBAA9C,SACE,sBAAK3B,UAAWC,IAAOkC,MAAvB,UACE,wBACE7B,KAAK,SACLN,UAAWC,IAAOmC,cAClBF,QAAS,WACP,EAAK5C,MAAMoC,WAJf,eASC3B,KAAKT,MAAM+C,cAGhBlB,O,GArC6BP,a,iBCyBpBC,eANS,SAAAhC,GAAK,MAAK,CAChCI,MAAO6B,IAAkBwB,UAAUzD,OAEV,SAAAmC,GAAQ,MAAK,CACtCN,SAAU,SAAA3B,GAAC,OAAIiC,EAASuB,YAAaxD,EAAE6C,OAAO3C,YAEjC4B,EA1BA,SAAC,GAAyB,IAAvB5B,EAAsB,EAAtBA,MAAOyB,EAAe,EAAfA,SACvB,OACE,qBAAKV,UAAWC,IAAOuC,OAAvB,SACE,wBAAOxC,UAAWC,IAAOG,MAAzB,mIAEE,uBACEE,KAAK,OACLN,UAAWC,IAAOI,MAClBpB,MAAOA,EACPyB,SAAUA,Y,kCCsBLG,cAAQ,MAHI,SAAAG,GAAQ,MAAK,CACtCyB,SAAU,SAAAC,GAAE,OAAI1B,EAASC,IAAmB0B,cAAcD,QAE7C7B,EAhCK,SAAC,GAAD,IAAG6B,EAAH,EAAGA,GAAIhE,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAQ8D,EAArB,EAAqBA,SAAUG,EAA/B,EAA+BA,SAA/B,OAClB,qBAAIlE,KAAMA,EAAMC,OAAQA,EAAQqB,UAAWC,IAAO4C,YAAlD,UACE,sBAAK7C,UAAWC,IAAO6C,YAAvB,UACGpE,EADH,IACS,sBAAMsB,UAAWC,IAAO8C,YAAxB,SAAsCpE,OAE/C,sBAAKqB,UAAWC,IAAO+C,kBAAvB,UACE,wBACE1C,KAAK,SACLN,UAAWC,IAAOgD,WAClBf,QAAS,kBAAMO,EAASC,IAH1B,8DAOA,wBACEpC,KAAK,SACLN,UAAWC,IAAOgD,WAClBf,QAAS,kBAAMU,KAHjB,mFCGS/B,eAJS,SAAAhC,GAAK,MAAK,CAChCU,SAAUuB,IAAkBoC,mBAAmBrE,MAGlCgC,EAfK,SAAC,GAAD,IAAGtB,EAAH,EAAGA,SAAH,OAClB,oBAAIS,UAAWC,IAAOkD,aAAtB,SACG5D,EAASC,KAAI,gBAAGkD,EAAH,EAAGA,GAAIhE,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,cAAC,EAAD,CAAsB+D,GAAIA,EAAIhE,KAAMA,EAAMC,OAAQA,GAAhC+D,WCElBU,G,wNACJvE,MAAQ,CACNwE,WAAW,G,EAEbC,UAAY,WACV,EAAKpE,SAAS,CAAEmE,WAAW,K,EAE7BE,WAAa,WACX,EAAKrE,SAAS,CAAEmE,WAAW,K,uDAE7B,WACEtD,KAAKT,MAAMkE,kB,oBAEb,WACE,OACE,sBAAKxD,UAAU,iBAAf,UACE,oBAAIA,UAAU,QAAd,8DACA,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,cAACyD,EAAA,EAAD,CACEC,QAAQ,YACRxB,QAASnC,KAAKuD,UACdtD,UAAU,SAHZ,6FAOCD,KAAKlB,MAAMwE,WACV,cAAC,EAAD,CAAO3B,QAAS3B,KAAKwD,WAArB,SACE,cAAC,EAAD,MAGJ,cAAC,EAAD,OAEF,cAAC,EAAD,CAAavD,UAAU,4B,GAjCNY,cA2CZC,sBAAQ,MAJI,SAAAG,GAAQ,MAAK,CACtCwC,cAAe,kBAAMxC,EAASC,IAAmBuC,qBAGpC3C,CAAkCuC","file":"static/js/contacts-page.97f127e7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__1jXwC\",\"title\":\"ContactForm_title__2AUJn\",\"label\":\"ContactForm_label__1_9aD\",\"input\":\"ContactForm_input__2vrgd\",\"addContactBtn\":\"ContactForm_addContactBtn__1lBji\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"Modal_overlay__3jN6Q\",\"modal\":\"Modal_modal__L_zlP\",\"closeModalBtn\":\"Modal_closeModalBtn__33InE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__3QK9A\",\"label\":\"Filter_label__1YEKJ\",\"input\":\"Filter_input__35LBw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"ContactList_contactsList__n3jNT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phoneNumber\":\"ContactItem_phoneNumber__3XFla\",\"contactItem\":\"ContactItem_contactItem__3KsoJ\",\"contactBtn\":\"ContactItem_contactBtn__2t_q0\",\"ring\":\"ContactItem_ring__1_krW\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.scss';\nimport { connect } from 'react-redux';\nimport { contactsOperations } from '../../redux/contacts';\nimport { contactsSelectors } from '../../redux/contacts';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\nclass ContactForm extends Component {\n  static propTypes = {\n    INITIAL_STATE: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n    onSubmit: PropTypes.func,\n  };\n  state = { ...INITIAL_STATE };\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n  handleSubmit = e => {\n    const { name } = this.state;\n    e.preventDefault();\n    if (\n      this.props.contacts\n        .map(item => item.name.toLowerCase())\n        .includes(name.toLowerCase())\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n  reset = () => {\n    this.setState({ ...INITIAL_STATE });\n  };\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit} className={styles.contactForm}>\n        <h2 className={styles.title}>Дані контакту: </h2>\n        <label className={styles.label}>\n          Ім'я\n          <input\n            className={styles.input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"введіть ім'я\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleChange}\n          />\n        </label>\n        <label className={styles.label}>\n          Номер телефону\n          <input\n            className={styles.input}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"XXX-XX-XX\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={styles.addContactBtn}>\n          Додати контакт\n        </button>\n      </form>\n    );\n  }\n}\nconst mapStateToPrope = state => ({\n  contacts: contactsSelectors.getContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(contactsOperations.addContact({ name, number })),\n});\n\nexport default connect(mapStateToPrope, mapDispatchToProps)(ContactForm);\n","import React, { Component } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Modal.module.scss';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nexport default class Modal extends Component {\r\n  static propTypes = {\r\n    onClose: PropTypes.func,\r\n    children: PropTypes.node,\r\n  };\r\n  componentDidMount() {\r\n    window.addEventListener('keydown', this.handleKeyDown);\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener('keydown', this.handleKeyDown);\r\n  }\r\n  handleKeyDown = event => {\r\n    if (event.code === 'Escape') {\r\n      this.props.onClose();\r\n    }\r\n  };\r\n  handleBackdropClick = event => {\r\n    if (event.currentTarget === event.target) {\r\n      this.props.onClose();\r\n    }\r\n  };\r\n  render() {\r\n    return createPortal(\r\n      <div className={styles.overlay} onClick={this.handleBackdropClick}>\r\n        <div className={styles.modal}>\r\n          <button\r\n            type=\"button\"\r\n            className={styles.closeModalBtn}\r\n            onClick={() => {\r\n              this.props.onClose();\r\n            }}\r\n          >\r\n            X\r\n          </button>\r\n          {this.props.children}\r\n        </div>\r\n      </div>,\r\n      modalRoot,\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Filter.module.scss';\nimport { connect } from 'react-redux';\nimport { contactsSelectors, changeFilter } from '../../redux/contacts';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <div className={styles.filter}>\n      <label className={styles.label}>\n        Пошук контакта за ім'ям\n        <input\n          type=\"text\"\n          className={styles.input}\n          value={value}\n          onChange={onChange}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import PropTypes from 'prop-types';\nimport styles from './ContactItem.module.scss';\nimport { connect } from 'react-redux';\nimport { contactsOperations } from '../../redux/contacts';\n\nconst ContactItem = ({ id, name, number, onDelete, onUpdate }) => (\n  <li name={name} number={number} className={styles.contactItem}>\n    <div className={styles.contactData}>\n      {name}:<span className={styles.phoneNumber}>{number}</span>\n    </div>\n    <div className={styles.contactOperations}>\n      <button\n        type=\"button\"\n        className={styles.contactBtn}\n        onClick={() => onDelete(id)}\n      >\n        Видалити\n      </button>\n      <button\n        type=\"button\"\n        className={styles.contactBtn}\n        onClick={() => onUpdate()}\n      >\n        Редагувати\n      </button>\n    </div>\n  </li>\n);\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func,\n  onUpdate: PropTypes.func,\n};\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id => dispatch(contactsOperations.deleteContact(id)),\n});\nexport default connect(null, mapDispatchToProps)(ContactItem);\n","import styles from './ContactList.module.scss';\nimport ContactItem from '../ContactItem';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { contactsSelectors } from '../../redux/contacts';\n\nconst ContactList = ({ contacts }) => (\n  <ul className={styles.contactsList}>\n    {contacts.map(({ id, name, number }) => (\n      <ContactItem key={id} id={id} name={name} number={number} />\n    ))}\n  </ul>\n);\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func,\n};\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nexport default connect(mapStateToProps)(ContactList);\n","import React, { Component } from 'react';\r\nimport ContactForm from '../components/ContactForm';\r\nimport { Button } from 'react-bootstrap';\r\nimport Modal from '../components/Modal';\r\nimport Filter from '../components/Filter';\r\nimport ContactList from '../components/ContactList';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations } from '../redux/contacts';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../styles.scss';\r\n\r\nclass ContactsPage extends Component {\r\n  state = {\r\n    showModal: false,\r\n  };\r\n  openModal = () => {\r\n    this.setState({ showModal: true });\r\n  };\r\n  closeModal = () => {\r\n    this.setState({ showModal: false });\r\n  };\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container-page\">\r\n        <h1 className=\"title\">Контакти</h1>\r\n        <div className=\"contacts\">\r\n          <div className=\"contacts-operations\">\r\n            <Button\r\n              variant=\"secondary\"\r\n              onClick={this.openModal}\r\n              className=\"addBtn\"\r\n            >\r\n              Додати контакт\r\n            </Button>\r\n            {this.state.showModal && (\r\n              <Modal onClose={this.closeModal}>\r\n                <ContactForm />\r\n              </Modal>\r\n            )}\r\n            <Filter />\r\n          </div>\r\n          <ContactList className=\"contacts-list\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactsPage);\r\n"],"sourceRoot":""}